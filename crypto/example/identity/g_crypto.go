//
// Code generated by `golem` package
// Source: github.com/fogfish/golem/crypto/crypto.go
// Time: 2020-02-02 19:27:23.295184 +0000 UTC
//
//
// Copyright (C) 2019 Dmitry Kolesnikov
//
// This file may be modified and distributed under the terms
// of the MIT license.  See the LICENSE file for details.
// https://github.com/fogfish/golem
//

package identity

import (
	"encoding/json"

	"github.com/fogfish/golem/crypto/cipher"
	
)

//
type Crypto Identity

//
func (value *Crypto) UnmarshalJSON(b []byte) (err error) {
	type Referable Crypto

	var cryptotext string
	if err = json.Unmarshal(b, &cryptotext); err != nil {
		return err
	}
	text, err := cipher.Default.Decrypt(cryptotext)

	var gen Referable
	if err = json.Unmarshal(text, &gen); err != nil {
		return err
	}
	*value = Crypto(gen)

	return
}

//
func (value Crypto) MarshalJSON() (bytes []byte, err error) {
	type Referable Crypto

	binary, err := json.Marshal(Referable(value))
	if err != nil {
		return
	}

	text, err := cipher.Default.Encrypt(binary)
	if err != nil {
		return
	}

	return json.Marshal(text)
}

//
func (value Crypto) PlainText() Identity {
	return Identity(value)
}
